@startuml use-case-diagram-v1

actor User


package RobotArm {
    database "Arm state" as armState
    (Change angle of arm)
    (Lower/raise magnet)
    (Update arm position)
    (Update holding state)
}

package TransportSlice {
    database "Slice state" as sliceState
    (Rotate slice)
    (Update slice position)
}

package Backend {
    database "System state" as systemState
    (Run algorithm)
    (Update system state)
    (Move arm to 'x')
    (Rotate slot to position)
    (Pickup/Place item)
}

package Camera {
    (Scan)
}

User --> (Run algorithm)

(Run algorithm) --> (Move arm to 'x')
(Run algorithm) --> (Rotate slot to position)
(Run algorithm) --> (Pickup/Place item)

(Move arm to 'x') ---> (Change angle of arm)
(Move arm to 'x') ..> (Update system state) : <<include>>
(Change angle of arm) ..> (Update arm position) : <<include>>
(Update arm position) --> armState


(Pickup/Place item) ..> (Update system state) : <<include>>
(Pickup/Place item) -up-> (Scan)
(Scan) -> (Pickup/Place item)   : confirm item exists\ncheck item color
(Pickup/Place item) --> (Lower/raise magnet)
(Lower/raise magnet) ..> (Update holding state) : <<include>>
(Update holding state) --> armState


(Rotate slot to position) ---> (Rotate slice) : Scan/Crane/StorageIn
(Rotate slice) ..> (Update slice position) : <<include>>
(Update slice position) --> sliceState



(Update system state) -> systemState
@enduml
